--== GROW A GARDEN • HUNGER TURBO (NIHONZARU) ==--
-- Tự động DROP ↔ RECALL để ép pet đói nhanh nhờ reset/spawn-tick
-- Không UI, auto chạy ngay. Nhấn K để bật/tắt.

-- ===== CẤU HÌNH =====
getgenv().CFG = {
    MODE            = "TURBO",  -- "TURBO" | "SAFE"
    CADENCE_TURBO   = 0.30,     -- giãn cách mỗi chu kỳ (giây) khi TURBO
    CADENCE_SAFE    = 0.75,     -- giãn cách khi SAFE
    BURST_PER_CYCLE = 2,        -- mỗi chu kỳ làm mấy nhịp drop↔recall
    KEYWORD_NAME    = "Nihonzaru", -- lọc theo tên (để trúng con khỉ)
    USE_GUIDS_ONLY  = false,    -- true: chỉ dùng GUIDs ở dưới
}

-- Nếu muốn khóa đích danh GUID con khỉ thì điền ở đây (giữ ngoặc nhọn):
getgenv().PET_GUIDS = {
    -- "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
}

-- ===== DỊCH VỤ =====
local RS        = game:GetService("ReplicatedStorage")
local Players   = game:GetService("Players")
local RunService= game:GetService("RunService")
local UIS       = game:GetService("UserInputService")
local LP        = Players.LocalPlayer

-- Tìm remote PetsService
local PetsService = RS:FindFirstChild("PetsService") or RS:FindFirstChildWhichIsA("RemoteEvent", true)
assert(PetsService, "[HUNGER] Không tìm thấy PetsService RemoteEvent")

local function firePets(cmd, ...)
    -- Bọc pcall + backoff khi bị throttle
    local ok, err = pcall(function()
        PetsService:FireServer(cmd, ...)
    end)
    return ok, err
end

-- ==== LẤY DANH SÁCH GUID THEO TÊN ====
local function collectGuidsByName(keyword)
    -- Tùy game, inventory thường nằm ở LP hoặc trong RS; ta hỏi server bằng patterns phổ biến
    -- Fallback: lấy từ PlayerData nếu có
    local guids = {}

    -- Cách 1: nhờ server trả list đang sở hữu (nếu game hỗ trợ)
    -- Nhiều bản chỉ cần gọi EquipPet/UnequipPet bằng GUID sẵn có; nếu không có, ta đọc từ pets equipped trong workspace
    -- Dò trong character/descendants xem có tag tên khớp (khi đang thả)
    for _, d in ipairs(workspace:GetDescendants()) do
        if typeof(d.Name) == "string" and d.Name:lower():find(keyword:lower()) then
            -- Lần theo Attributes/Value để lấy GUID
            local guid
            for _, v in ipairs(d:GetDescendants()) do
                if v:IsA("StringValue") and v.Name:lower():find("guid") then
                    guid = v.Value
                    break
                end
                if v:IsA("ObjectValue") and v.Name:lower():find("guid") then
                    guid = tostring(v.Value)
                    break
                end
            end
            if guid and not table.find(guids, guid) then
                table.insert(guids, guid)
            end
        end
    end
    return guids
end

-- Ưu tiên GUID do anh khai báo; nếu trống thì lọc theo tên
local TARGET_GUIDS = {}
do
    if getgenv().CFG.USE_GUIDS_ONLY and #getgenv().PET_GUIDS > 0 then
        TARGET_GUIDS = getgenv().PET_GUIDS
    else
        local byName = collectGuidsByName(getgenv().CFG.KEYWORD_NAME)
        if #getgenv().PET_GUIDS > 0 then
            -- gộp: dùng GUID anh điền + cái nào bắt được theo tên
            local set = {}
            for _, g in ipairs(getgenv().PET_GUIDS) do set[g]=true end
            for _, g in ipairs(byName) do set[g]=true end
            for g,_ in pairs(set) do table.insert(TARGET_GUIDS, g) end
        else
            TARGET_GUIDS = (#byName>0) and byName or {}
        end
    end
end

if #TARGET_GUIDS == 0 then
    warn("[HUNGER] Không tìm ra GUID nào cho '"..getgenv().CFG.KEYWORD_NAME.."' — vẫn chạy nhưng sẽ không tác động gì.")
end

-- ==== HÀM DROP/RECALL NHANH ====
local function equip(g)   return firePets("EquipPet", g)   end
local function unequip(g) return firePets("UnequipPet", g) end

local function burst_once()
    -- 1) Drop tất cả
    for _, g in ipairs(TARGET_GUIDS) do equip(g) end
    -- 2) micro-yield để server kịp nhận (rất ngắn)
    task.wait(0.03)
    -- 3) Recall tất cả
    for _, g in ipairs(TARGET_GUIDS) do unequip(g) end
end

-- ==== VÒNG LẶP THÍCH ỨNG ====
local running = true
UIS.InputBegan:Connect(function(io, gpe)
    if gpe then return end
    if io.KeyCode == Enum.KeyCode.K then
        running = not running
        print( running and "[HUNGER] ▶ RUN" or "[HUNGER] ⏸ PAUSE" )
    end
end)

task.defer(function()
    local cadence = (getgenv().CFG.MODE=="TURBO") and getgenv().CFG.CADENCE_TURBO or getgenv().CFG.CADENCE_SAFE
    local backoff = 0
    print(string.format("[HUNGER] Start (%s) • cadence=%.2fs • burst=%d",
        getgenv().CFG.MODE, cadence, getgenv().CFG.BURST_PER_CYCLE))

    while true do
        if running and #TARGET_GUIDS > 0 then
            local ok_all = true
            for i=1, getgenv().CFG.BURST_PER_CYCLE do
                burst_once()
                -- nếu server lag/throttle, cho nghỉ siêu ngắn giữa các burst
                task.wait(0.02)
            end
            -- Nếu khung trước thấy lỗi throttle, tăng backoff nhẹ
            if not ok_all then backoff = math.min(backoff + 0.10, 1.0) else backoff = math.max(backoff - 0.05, 0) end
        end

        -- Nhịp chính: cadence + backoff
        local t = cadence + backoff
        if t < 0.05 then t = 0.05 end
        task.wait(t)
    end
end)
